import { SelectHTMLAttributes, useEffect, useState } from 'react'

import clsx from 'clsx'
import ArrowDown from 'shared/assets/icons/general/arrow-Down.svg'
import ArrowUp from 'shared/assets/icons/general/arrow-Up.svg'

import cls from './Select.module.scss'

interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
  disabled?: boolean
  options: string[]
  selectedItem?: string
}
const Select = (props: SelectProps) => {
  const { disabled, options, selectedItem, ...otherProps } = props
  const [isOpen, setIsOpen] = useState(false)
  const [selectedOption, setSelectedOption] = useState(selectedItem)

  useEffect(() => {
    setSelectedOption(selectedItem)
  }, [selectedItem])

  const toggling = () => {
    setIsOpen(!isOpen)
  }

  const onOptionClicked = (value: string) => () => {
    setSelectedOption(value)
    setIsOpen(false)
  }

  const mods = {
    [cls.active]: isOpen,
    [cls.disabled]: disabled,
  }

  return (
    <div className={clsx(cls.DropDownContainer)}>
      <button
        className={clsx(cls.DropDownHeader, mods)}
        disabled={disabled}
        onClick={toggling}
        type={'button'}
      >
        {selectedOption || options[0]}
        {isOpen ? <ArrowUp className={clsx(cls.Icon)} /> : <ArrowDown className={clsx(cls.Icon)} />}
      </button>
      {isOpen && (
        <div>
          <div className={clsx(cls.DropDownList)}>
            {options.map((option, index) => (
              <li className={clsx(cls.ListItem)} key={index} onClick={onOptionClicked(option)}>
                {option}
              </li>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

export default Select





import React from 'react'

import Select from '@/shared/Select/Select'
import { type Meta, type StoryFn, StoryObj } from '@storybook/react'

export default {
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    options: ['Selected-box 1', 'Selected-box 2', 'Selected-box 3'],
  },
  component: Select,
  title: 'shared/Select',
} as Meta<typeof Select>

const Template: StoryFn<typeof Select> = args => <Select {...args} />

export const Normal: StoryObj<typeof Select> = {
  render: Template,
}

export const NormalDisabled: StoryObj<typeof Select> = {
  args: {
    disabled: true,
  },
  render: Template,
}

export const NormalDark: StoryObj<typeof Select> = {
  render: Template,
}

export const NormalDarkDisabled: StoryObj<typeof Select> = {
  args: {
    disabled: true,
  },
  render: Template,
}
